import { Globe, Server, Database, Code, Shield, Bot, ArrowLeft } from 'lucide-react'
import { redirect, notFound } from 'next/navigation'
import Link from 'next/link'
import React from 'react'

// This ensures all possible paths are generated at build time
export async function generateStaticParams() {
    // Only generate params for nodes handled by this dynamic page
    const validNodeIds = Object.keys(nodesInfo).filter(
        nodeId => !['inference', 'llm_service', 'vector_db', 'training', 'security'].includes(nodeId)
    );
    return validNodeIds.map(nodeId => ({
        nodeId,
    }));
}

// Define the node info type with string instead of React.ElementType
interface NodeInfo {
    id: string
    label: string
    description: string
    icon: string // Changed from React.ElementType to string
    color: string
}

// Define the vulnerability type
interface Vulnerability {
    id: string
    title: string
    description: string
    position: { node: string; offset: { x: number; y: number } }
    color: string
    path: string
}

interface VulnerabilityCardProps {
    id: string
    title: string
    description: string
    color: string
    path: string
}

// Node information with string icons
const nodesInfo: { [key: string]: NodeInfo } = {
    client: {
        id: 'client',
        label: 'Client/Malicious Actor',
        description: 'The client or malicious actor who interacts with the LLM system, potentially attempting to exploit vulnerabilities.',
        icon: 'Globe',
        color: '#00ffff'
    },
    inference: {
        id: 'inference',
        label: 'Ingress',
        description: 'The entry point for user inputs to the LLM system, handling queries before processing.',
        icon: 'Bot',
        color: '#3b82f6'
    },
    llm_service: {
        id: 'llm_service',
        label: 'LLM Service',
        description: 'The core language model service that processes inputs and generates responses.',
        icon: 'Server',
        color: '#ff00ff'
    },
    vector_db: {
        id: 'vector_db',
        label: 'Vector DB',
        description: 'Database storing vector embeddings used by the LLM for retrieval-augmented generation.',
        icon: 'Database',
        color: '#22c55e'
    },
    training: {
        id: 'training',
        label: 'Training Pipeline',
        description: 'The pipeline responsible for training and fine-tuning the language model.',
        icon: 'Code',
        color: '#eab308'
    },
    security: {
        id: 'security',
        label: 'Security Layer',
        description: 'The security mechanisms that protect the LLM system from various threats.',
        icon: 'Shield',
        color: '#ef4444'
    }
};

// All vulnerabilities from the diagram
const allVulnerabilities: Vulnerability[] = [
    {
        id: 'LLM01',
        title: 'Prompt Injection',
        description: 'Manipulating LLMs via crafted inputs can lead to unauthorized access, data breaches, and compromised decision-making.',
        position: { node: 'inference', offset: { x: -400, y: -80 } },
        color: '#3b82f6',
        path: '/labs/prompt-injection'
    },
    {
        id: 'LLM02',
        title: 'Sensitive Information Disclosure',
        description: 'Sensitive information can affect both the LLM and its application context. This includes personal identifiable information (PII), financial details, health records, confidential business data, security credentials, and legal documents.',
        position: { node: 'llm_service', offset: { x: 200, y: -80 } },
        color: '#ff00ff',
        path: '/labs/sensitive-info-disclosure'
    },
    {
        id: 'LLM03',
        title: 'Supply Chain',
        description: 'LLM supply chains are susceptible to various vulnerabilities, which can affect the integrity of training data, models, and deployment platforms. These risks can result in biased outputs, security breaches, or system failures.',
        position: { node: 'training', offset: { x: -200, y: 0 } },
        color: '#eab308',
        path: '/labs/supply-chain'
    },
    {
        id: 'LLM04',
        title: 'Data and Model Poisoning',
        description: 'Data poisoning occurs when pre-training, fine-tuning, or embedding data is manipulated to introduce vulnerabilities, backdoors, or biases.',
        position: { node: 'vector_db', offset: { x: 200, y: -80 } },
        color: '#22c55e',
        path: '/labs/data-poisoning'
    },
    {
        id: 'LLM05',
        title: 'Improper Output Handling',
        description: 'Improper Output Handling refers specifically to insufficient validation, sanitization, and handling of the outputs generated by large language models before they are passed downstream to other components and systems.',
        position: { node: 'inference', offset: { x: 200, y: -80 } },
        color: '#3b82f6',
        path: '/labs/improper-output'
    },
    {
        id: 'LLM06',
        title: 'Excessive Agency',
        description: 'Granting LLMs unchecked autonomy to take action can lead to unintended consequences, jeopardizing reliability, privacy, and trust.',
        position: { node: 'llm_service', offset: { x: -200, y: 150 } },
        color: '#ff00ff',
        path: '/labs/excessive-agency'
    },
    {
        id: 'LLM07',
        title: 'System Prompt Leakage',
        description: 'The system prompt leakage vulnerability in LLMs refers to the risk that the system prompts or instructions used to steer the behavior of the model can also contain sensitive information that was not intended to be discovered',
        position: { node: 'security', offset: { x: -200, y: 80 } },
        color: '#ef4444',
        path: '/labs/system-prompt-leakage'
    },
    {
        id: 'LLM08',
        title: 'Vector and Embedding Weaknesses',
        description: 'Weaknesses in how vectors and embeddings are generated, stored, or retrieved can be exploited by malicious actions (intentional or unintentional) to inject harmful content, manipulate model outputs, or access sensitive information.',
        position: { node: 'vector_db', offset: { x: 200, y: 80 } },
        color: '#22c55e',
        path: '/labs/vector-embedding-weakness'
    },
    {
        id: 'LLM09',
        title: 'Misinformation',
        description: 'Misinformation occurs when LLMs produce false or misleading information that appears credible.',
        position: { node: 'llm_service', offset: { x: 200, y: 150 } },
        color: '#ff00ff',
        path: '/labs/misinformation'
    },
    {
        id: 'LLM10',
        title: 'Unbounded Consumption',
        description: 'Unbounded Consumption occurs when a Large Language Model (LLM) application allows users to conduct excessive and uncontrolled inferences, leading to risks such as denial of service (DoS), economic losses, model theft, and service degradation',
        position: { node: 'inference', offset: { x: -200, y: -180 } },
        color: '#3b82f6',
        path: '/labs/unbounded-consumption'
    }
];

// Define the correct params type for Next.js pages
// interface PageParams {
//     params: {
//         nodeId: string;
//     };
// }

export default async function NodePage({ params }: { params: any }) {
    const { nodeId } = params;

    // Handle redirects for dedicated node pages
    const dedicatedNodes = ['inference', 'llm_service', 'vector_db', 'training', 'security'];
    if (dedicatedNodes.includes(nodeId)) {
        redirect(`/nodes/${nodeId}`);
    }

    // Get node info
    const nodeInfo = nodesInfo[nodeId];

    // Handle invalid node IDs
    if (!nodeInfo) {
        notFound();
    }

    // Get related vulnerabilities
    const relatedVulnerabilities = allVulnerabilities.filter(
        vuln => vuln.position.node === nodeId
    );

    // Convert string icon to component
    let IconComponent;
    switch (nodeInfo.icon) {
        case 'Globe': IconComponent = Globe; break;
        case 'Bot': IconComponent = Bot; break;
        case 'Server': IconComponent = Server; break;
        case 'Database': IconComponent = Database; break;
        case 'Code': IconComponent = Code; break;
        case 'Shield': IconComponent = Shield; break;
        default: IconComponent = Globe;
    }

    return (
        <div className="min-h-screen bg-[#1e293b] text-white p-8">
            {/* Navigation Bar */}
            <div className="bg-gray-900/50 border-b border-gray-800 mb-8">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex items-center justify-between h-16">
                        <Link
                            href="/"
                            className="flex items-center gap-2 text-gray-300 hover:text-white transition-colors"
                        >
                            <ArrowLeft className="w-5 h-5" />
                            Back to Threat Model
                        </Link>
                    </div>
                </div>
            </div>

            <div className="max-w-7xl mx-auto space-y-8">
                {/* Header */}
                <div className="space-y-4">
                    <div className="flex items-center gap-4">
                        <div
                            className="p-4 bg-black rounded-full border-4"
                            style={{ borderColor: nodeInfo.color }}
                        >
                            <IconComponent className="w-10 h-10" style={{ color: nodeInfo.color }} />
                        </div>
                        <h1 className="text-4xl font-bold">{nodeInfo.label} Component</h1>
                    </div>
                    <p className="text-xl text-gray-300 max-w-3xl">
                        {nodeInfo.description}
                    </p>
                </div>

                {/* Component Description */}
                <div className="bg-gray-900/50 border border-gray-800 rounded-lg p-6">
                    <h2 className="text-2xl font-semibold mb-4">Component Overview</h2>
                    <div className="space-y-4 text-gray-300">
                        <p>
                            The {nodeInfo.label} is a critical component in the LLM architecture.
                        </p>
                        <p>
                            It will usually serve as the starting point for injection attacks
                            or other experiments to exploit the model behavior.
                        </p>
                    </div>
                </div>

                {/* Vulnerabilities Section */}
                <div>
                    <h2 className="text-2xl font-semibold mb-6">Related Vulnerabilities</h2>
                    {relatedVulnerabilities.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {relatedVulnerabilities.map(vuln => (
                                <VulnerabilityCard
                                    key={vuln.id}
                                    id={vuln.id}
                                    title={vuln.title}
                                    description={vuln.description}
                                    color={vuln.color}
                                    path={vuln.path}
                                />
                            ))}
                        </div>
                    ) : (
                        <div className="bg-gray-900/50 border border-gray-800 rounded-lg p-6 text-center">
                            <p className="text-gray-300">No specific vulnerabilities found for this component.</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

function VulnerabilityCard({ id, title, description, color, path }: VulnerabilityCardProps) {
    return (
        <Link href={path} className="block">
            <div
                className="bg-gray-900 border border-gray-800 rounded-lg overflow-hidden hover:shadow-lg transition-all hover:scale-[1.02] cursor-pointer"
                style={{ borderLeftColor: color, borderLeftWidth: '4px' }}
            >
                <div className="p-6">
                    <div className="flex items-center gap-2 mb-3">
                        <div
                            className="text-sm font-bold px-2 py-1 rounded"
                            style={{ backgroundColor: `${color}30`, color }}
                        >
                            {id}
                        </div>
                        <h3 className="text-lg font-semibold">{title}</h3>
                    </div>
                    <p className="text-gray-300 text-sm line-clamp-3">{description}</p>
                </div>
                <div className="px-6 py-3 bg-black/20 border-t border-gray-800">
                    <div className="text-sm flex justify-between items-center">
                        <span className="text-gray-400">Go to lab</span>
                        <span style={{ color }}>→</span>
                    </div>
                </div>
            </div>
        </Link>
    );
} 